// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/glower/kaze/graph/model"
	mock "github.com/stretchr/testify/mock"
)

// PowerPlantService is an autogenerated mock type for the PowerPlantService type
type PowerPlantService struct {
	mock.Mock
}

// CreatePowerPlant provides a mock function with given fields: ctx, plant
func (_m *PowerPlantService) CreatePowerPlant(ctx context.Context, plant *model.PowerPlant) (*model.PowerPlant, error) {
	ret := _m.Called(ctx, plant)

	if len(ret) == 0 {
		panic("no return value specified for CreatePowerPlant")
	}

	var r0 *model.PowerPlant
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.PowerPlant) (*model.PowerPlant, error)); ok {
		return rf(ctx, plant)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.PowerPlant) *model.PowerPlant); ok {
		r0 = rf(ctx, plant)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.PowerPlant)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.PowerPlant) error); ok {
		r1 = rf(ctx, plant)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPowerPlant provides a mock function with given fields: ctx, id, withElevation, withWeatherForecasts
func (_m *PowerPlantService) GetPowerPlant(ctx context.Context, id string, withElevation bool, withWeatherForecasts bool) (*model.PowerPlant, error) {
	ret := _m.Called(ctx, id, withElevation, withWeatherForecasts)

	if len(ret) == 0 {
		panic("no return value specified for GetPowerPlant")
	}

	var r0 *model.PowerPlant
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool, bool) (*model.PowerPlant, error)); ok {
		return rf(ctx, id, withElevation, withWeatherForecasts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, bool, bool) *model.PowerPlant); ok {
		r0 = rf(ctx, id, withElevation, withWeatherForecasts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.PowerPlant)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, bool, bool) error); ok {
		r1 = rf(ctx, id, withElevation, withWeatherForecasts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPowerPlants provides a mock function with given fields: ctx, page, pageSize, withElevation, withWeatherForecasts
func (_m *PowerPlantService) ListPowerPlants(ctx context.Context, page int, pageSize int, withElevation bool, withWeatherForecasts bool) (*model.PowerPlantList, error) {
	ret := _m.Called(ctx, page, pageSize, withElevation, withWeatherForecasts)

	if len(ret) == 0 {
		panic("no return value specified for ListPowerPlants")
	}

	var r0 *model.PowerPlantList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, bool, bool) (*model.PowerPlantList, error)); ok {
		return rf(ctx, page, pageSize, withElevation, withWeatherForecasts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int, bool, bool) *model.PowerPlantList); ok {
		r0 = rf(ctx, page, pageSize, withElevation, withWeatherForecasts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.PowerPlantList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int, bool, bool) error); ok {
		r1 = rf(ctx, page, pageSize, withElevation, withWeatherForecasts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePowerPlant provides a mock function with given fields: ctx, plant
func (_m *PowerPlantService) UpdatePowerPlant(ctx context.Context, plant *model.PowerPlant) (*model.PowerPlant, error) {
	ret := _m.Called(ctx, plant)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePowerPlant")
	}

	var r0 *model.PowerPlant
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.PowerPlant) (*model.PowerPlant, error)); ok {
		return rf(ctx, plant)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.PowerPlant) *model.PowerPlant); ok {
		r0 = rf(ctx, plant)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.PowerPlant)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.PowerPlant) error); ok {
		r1 = rf(ctx, plant)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPowerPlantService creates a new instance of PowerPlantService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPowerPlantService(t interface {
	mock.TestingT
	Cleanup(func())
}) *PowerPlantService {
	mock := &PowerPlantService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
