// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/glower/kaze/graph/model"
	mock "github.com/stretchr/testify/mock"
)

// PowerPlantRepository is an autogenerated mock type for the PowerPlantRepository type
type PowerPlantRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, plant
func (_m *PowerPlantRepository) Create(ctx context.Context, plant *model.PowerPlant) (*model.PowerPlant, error) {
	ret := _m.Called(ctx, plant)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *model.PowerPlant
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.PowerPlant) (*model.PowerPlant, error)); ok {
		return rf(ctx, plant)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.PowerPlant) *model.PowerPlant); ok {
		r0 = rf(ctx, plant)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.PowerPlant)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.PowerPlant) error); ok {
		r1 = rf(ctx, plant)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *PowerPlantRepository) GetByID(ctx context.Context, id string) (*model.PowerPlant, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *model.PowerPlant
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.PowerPlant, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.PowerPlant); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.PowerPlant)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, offset, limit
func (_m *PowerPlantRepository) List(ctx context.Context, offset int, limit int) ([]model.PowerPlant, int, error) {
	ret := _m.Called(ctx, offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []model.PowerPlant
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) ([]model.PowerPlant, int, error)); ok {
		return rf(ctx, offset, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []model.PowerPlant); ok {
		r0 = rf(ctx, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.PowerPlant)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) int); ok {
		r1 = rf(ctx, offset, limit)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int, int) error); ok {
		r2 = rf(ctx, offset, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Update provides a mock function with given fields: ctx, plant
func (_m *PowerPlantRepository) Update(ctx context.Context, plant *model.PowerPlant) (*model.PowerPlant, error) {
	ret := _m.Called(ctx, plant)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *model.PowerPlant
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.PowerPlant) (*model.PowerPlant, error)); ok {
		return rf(ctx, plant)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.PowerPlant) *model.PowerPlant); ok {
		r0 = rf(ctx, plant)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.PowerPlant)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.PowerPlant) error); ok {
		r1 = rf(ctx, plant)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPowerPlantRepository creates a new instance of PowerPlantRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPowerPlantRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *PowerPlantRepository {
	mock := &PowerPlantRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
