// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	repository "github.com/glower/kaze/pkg/repository"
	mock "github.com/stretchr/testify/mock"
)

// OpenMeteoRepository is an autogenerated mock type for the OpenMeteoRepository type
type OpenMeteoRepository struct {
	mock.Mock
}

// GetElevation provides a mock function with given fields: ctx, latitude, longitude
func (_m *OpenMeteoRepository) GetElevation(ctx context.Context, latitude float64, longitude float64) (float64, error) {
	ret := _m.Called(ctx, latitude, longitude)

	if len(ret) == 0 {
		panic("no return value specified for GetElevation")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, float64, float64) (float64, error)); ok {
		return rf(ctx, latitude, longitude)
	}
	if rf, ok := ret.Get(0).(func(context.Context, float64, float64) float64); ok {
		r0 = rf(ctx, latitude, longitude)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, float64, float64) error); ok {
		r1 = rf(ctx, latitude, longitude)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWeatherForecast provides a mock function with given fields: ctx, latitude, longitude
func (_m *OpenMeteoRepository) GetWeatherForecast(ctx context.Context, latitude float64, longitude float64) (*repository.WeatherForecastResponse, error) {
	ret := _m.Called(ctx, latitude, longitude)

	if len(ret) == 0 {
		panic("no return value specified for GetWeatherForecast")
	}

	var r0 *repository.WeatherForecastResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, float64, float64) (*repository.WeatherForecastResponse, error)); ok {
		return rf(ctx, latitude, longitude)
	}
	if rf, ok := ret.Get(0).(func(context.Context, float64, float64) *repository.WeatherForecastResponse); ok {
		r0 = rf(ctx, latitude, longitude)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.WeatherForecastResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, float64, float64) error); ok {
		r1 = rf(ctx, latitude, longitude)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewOpenMeteoRepository creates a new instance of OpenMeteoRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOpenMeteoRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *OpenMeteoRepository {
	mock := &OpenMeteoRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
